% meow/1

struct point2d(x: i32, y: i32);

test "application" {
  assert 1n + 1n ==> 2n;
  assert 1n - 1n ==> 0n;
  assert 2n * 2n ==> 4n;
  assert 4n \ 2n ==> 2n;
  assert 2n ** 3n ==> 8n;
  assert 4n % 3n ==> 1n;

  assert 1n < 2n;
  assert 2n <= 2n;
  assert 2n > 1n;
  assert 2n >= 2n;
  assert 2n === 2n;
  assert 1n =/= 2n;

  assert 2n << 2n ==> 8n;
  assert 8n >> 2n ==> 2n;
  assert 8n >>> 8n ==> 0n;
  assert 1n | 2n ==> 3n;
  assert 1n & 2n ==> 0n;
  assert 1n ^ 2n ==> 3n;

  assert [1, 2, 3] ++ [4, 5] ==> [1, 2, 3, 4, 5];
  assert [1: 2, 3: 4, ...[3: 5]] ==> [1: 2, 3: 5];
  assert #(a: 1, b: 2) ==> #(b: 2, a: 1);
  assert "hello" ++ "world" ==> "helloworld";

  assert 1n as integer ==> 1;
  
  let X = #cell of(1n);
  assert (X <- 2n) ==> 1n;

  let Z = #cell of([1, 2]);
  let Y = #weak-ref of(Z read());
  assert (Y read() unwrap()) ==> Z read();

  assert 1n =:= 1n;
}

test "types" {
  let P = maybe..none;
  let Q = new maybe..some(value: 3n);

  assert P is maybe;
  assert P is maybe..none;
  assert Q is maybe..some;

  assert Q.value ==> 3n;

  assert new point2d(x: 1n, y: 1n) is point2d;
  assert (new point2d(x: 1n, y: 2n)).y ==> 2n;
}

test "thunks" {
  let A = lazy (force B);
  let B = lazy 1n + 1n;

  assert force A ==> 2n;
  assert force B ==> 2n;
  assert force A ==> 2n :: repeating;
}

def maybe..some value() { self.value }
def maybe..none value() { nothing }

test "methods" {
  assert maybe..none value() ==> nothing;
  assert new maybe..some(value: 1n) value() ==> 1n;
}

test "data" {
  assert 1n ==> 1n;
  assert 1.0f ==> 1.0f;
  assert 1 ==> 1;
  assert "text" ==> "text";
  assert true ==> true;
  assert false ==> false;
  assert nothing ==> nothing;
  assert [1, 2, 3] ==> [1, 2, 3];
  assert [1: 2, 3: 4] ==> [1: 2, 3: 4];
  assert #integer ==> #integer;
}

test "lambda and application" {
  let F0 = { 1 };
  let F1 = { A in A + 1 };
  let F2 = { A, B in A + B };

  assert F0() ==> 1;
  assert F1(1) ==> 2;
  assert F2(2, 3) ==> 5;

  let A = 1 |> _ + 2 |> #(a: 1, b: _) |> _.b;
  assert A ==> 3;
}

import foreign "./foreign.js"; // node resolution

test "foreign calls" {
  assert foreign hello("hi") ==> "hihi";
}

test "repeat loops" {
  // Functional repeat blocks
  let B = (repeat with A = 1n {
    when {
      A < 10n => continue with A = A + 1n;
      otherwise => break with A + 1n;
    }
  });

  assert B ==> 11n;

  // Regular repeat blocks
  let X = #cell of(1n);
  repeat {
    when {
      X read() < 10n => {
        X <- X read() + 1n;
        continue;
      }
      otherwise => break;
    }
  }
  assert X read() ==> 10n;
}

test "binaries" {
  assert <<>> ==> <<>>;
  assert <<1, 2, 3>> ==> <<1, 2, 3>>;
  assert <<12345:u16le>> ==> <<57, 48>>;
  assert <<12345:u16be>> ==> <<48, 57>>;
  assert <<12345:u32le>> ==> <<57, 48, 0, 0>>;
  assert <<12345:u32be>> ==> <<0,   0, 48, 57>>;
  assert <<12345:u64le>> ==> <<57, 48, 0, 0, 0, 0, 0, 0>>;
  assert <<12345:u64be>> ==> <<0,   0, 0, 0, 0, 0, 48, 57>>;
}

open package meow.codec;
open package meow.codec as c;

test "opening packages" {
  assert #base64 from(<<1, 2, 3, 4>>) encode() ==> "AQIDBA==";
  assert #base64 decode("AQIDBA==") bytes() ==> <<1, 2, 3, 4>>;

  assert #c/base64 from(<<1, 2, 3, 4>>) encode() ==> "AQIDBA==";
  assert #c/base64 decode("AQIDBA==") bytes() ==> <<1, 2, 3, 4>>;
}

// TODO:
// for loops