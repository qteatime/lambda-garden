% meow/1

struct base64(bytes: byte-array);

import foreign "./native/base64.js";

def #base64 from(Bytes: byte-array) -> base64 {
  new base64(Bytes);
}

def #base64 decode(Text: text) -> base64 {
  new base64(foreign base64.decode(Text));
} test {
  assert #base64 decode("") bytes() ==> <<>>;
  assert #base64 decode("YQ==") bytes() ==> "a" utf8-bytes();
  assert #base64 decode("SXQgd2FzIGEgZGFyaywgc3Rvcm15IG5pZ2h0") bytes()
    ==> "It was a dark, stormy night" utf8-bytes();
}

def base64 bytes() {
  self.bytes;
}

def base64 encode() -> text {
  foreign base64.encode(self.bytes);
} test {
  assert #base64 from(<<>>) encode() ==> "";
  assert #base64 from("a" utf8-bytes()) encode() ==> "YQ==";
  assert #base64 from("It was a dark, stormy night" utf8-bytes()) encode()
    ==> "SXQgd2FzIGEgZGFyaywgc3Rvcm15IG5pZ2h0";
}

def base64 === (X: base64) -> bool {
  self.bytes === X.bytes;
}

def base64 =/= (X: base64) -> bool {
  self.bytes =/= X.bytes;
}