% meow/1

/// A boolean algebra provides a set of logical operators on top of boolean
/// objects. This *does not* extend to many-valued logics, and those should
/// not implement this trait.
// trait boolean-algebra {
//   requires trait equality;

//   /// Logical conjunction
//   def A and A -> A;

//   /// Logical disjunction
//   def A or A -> A;

//   /// Logical negation
//   def not A -> A;

//   /// Exclusive OR
//   def A ^ (That: A) -> A {
//     not (self === That);
//   }

//   /// Logical implication
//   def A imply(That: A) -> A {
//     (not self) or That;
//   }
// }


/// Logical conjunction.
def bool and (X: bool) -> bool {
  primitive bool.and(self, X);
} test {
  assert true and true ==> true;
  assert true and false ==> false;
  assert false and true ==> false;
  assert false and false ==> false;
}

/// Logical disjunction
def bool or (X: bool) -> bool {
  primitive bool.or(self, X);
} test {
  assert true or true ==> true;
  assert true or false ==> true;
  assert false or true ==> true;
  assert false or false ==> false;
}

/// Logical negation
def not bool -> bool {
  primitive bool.not(self);
} test {
  assert not true ==> false;
  assert not false ==> true;
}

/// Logical implication
def bool imply(That: bool) -> bool {
  when {
    self => That;
    otherwise => true;
  }
} test {
  assert true imply(false) ==> false;
  assert true imply(true) ==> true;
  assert false imply(false) ==> true;
  assert false imply(true) ==> true;
}

/// Exclusive OR
def bool ^ (That: bool) -> bool {
  not (self === That);
} test {
  assert true ^ true ==> false;
  assert true ^ false ==> true;
  assert false ^ true ==> true;
  assert false ^ false ==> false;
}