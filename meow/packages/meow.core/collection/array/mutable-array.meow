% meow/1

def mutable-array count() = self.array count();


// -- Constructing -------------------------------------------------------------
def #mutable-array empty() -> mutable-array<T> {
  new mutable-array([]);
} test {
  assert #mutable-array empty() read-only() ==> [];
}

def #mutable-array from(Source: array<T>) -> mutable-array<T> {
  new mutable-array(Source slice(from: 0) as array);
} test {
  assert #mutable-array from([1, 2, 3]) read-only() ==> [1, 2, 3];
}

def #mutable-array allocate(size Size: int, default Default: T) -> mutable-array<T> {
  new mutable-array(primitive array.allocate(Size, Default));
} test {
  assert #mutable-array allocate(size: 5, default: 1) read-only() ==> [1, 1, 1, 1, 1];
}


// -- Indexing -----------------------------------------------------------------
def mutable-array<T> at(Index: int) {
  self.array at(Index);
} test {
  assert #mutable-array from([1, 2, 3]) at(1) unwrap() ==> 2;
}

def mutable-array<T> at!(Index: int) {
  self.array at!(Index);
} test {
  assert #mutable-array from([1, 2, 3]) at!(1) ==> 2;
}

def mutable-array<T> at(Index: int, put Value: T) {
  assert (Index >= 0) and (Index < self count()) :: in-bounds;
  primitive array.at-put-mut(self.array, Index, Value);
  self;
} test {
  let A = #mutable-array from([1, 2, 3, 4]);
  A at(0, put: 9);
  assert A read-only() ==> [9, 2, 3, 4];
  A at(3, put: 8);
  assert A read-only() ==> [9, 2, 3, 8];
}

def mutable-array<T> at(Index: int, update Fn: (T) -> T) {
  self at(Index, put: Fn(self at!(Index)));
} test {
  let A = #mutable-array from([1, 2, 3]);
  A at(0, update: (_ + 1));
  assert A read-only() ==> [2, 2, 3];
}

def mutable-array<T> at(Index: int, put-all Array: array<T>) {
  assert (Index >= 0) and ((Index + Array count()) <= self count()) :: in-bounds;
  primitive array.at-put-all(self.array, Index, Array);
  self;
} test {
  let A = #mutable-array from([1, 2, 3]);
  A at(1, put-all: [4, 5]);
  assert A read-only() ==> [1, 4, 5];
}

def mutable-array<T> at(Index: int, put-all Array: array-slice<T>) {
  assert (Index >= 0) and ((Index + Array count()) <= self count()) :: in-bounds;
  primitive array.at-put-all-slice(self.array, Index, Array.array, Array.offset, Array.length);
  self;
} test {
  let A = #mutable-array from([1, 2, 3]);
  let B = [4, 5, 6];
  A at(1, put-all: B slice(to: 1));
  assert A read-only() ==> [1, 4, 3];
}

def mutable-array<T> at(Index: int, put-all Array: mutable-array<T>) {
  self at(Index, put-all: Array read-only());
} test {
  let A = #mutable-array from([1, 2, 3]);
  let B = #mutable-array from([4, 5]);
  A at(1, put-all: B);
  assert A read-only() ==> [1, 4, 5];
  B at(0, put: 9);
  assert A read-only() ==> [1, 4, 5];
}


// -- Updating -----------------------------------------------------------------
def mutable-array<T> fill(Value: T, from Start: int, length Length: int) -> mutable-array<T> {
  assert (Length >= 0) :: positive-length;
  assert (Start >= 0) and ((Start + Length) <= self count()) :: in-bounds;
  primitive array.fill(self.array, Value, Start, Start + Length);
  self;
} test {
  let A = #mutable-array from([1, 2, 3]);
  assert A fill(0, from: 0, length: 2) read-only() ==> [0, 0, 3];
  assert A read-only() ==> [0, 0, 3];
}

def mutable-array<T> fill(Value: T) -> mutable-array<T> {
  primitive array.fill-all(self.array, Value);
  self;
} test {
  let A = #mutable-array from([1, 2, 3]);
  assert A fill(0) read-only() ==> [0, 0, 0];
  assert A read-only() ==> [0, 0, 0];
}

def mutable-array<T> prepend(Value: T) -> mutable-array<T> {
  primitive array.prepend-mut(self.array, Value);
  self;
} test {
  let A = #mutable-array from([]);
  assert A prepend(1) read-only() ==> [1];
  assert A prepend(2) read-only() ==> [2, 1];
  assert A prepend(3) read-only() ==> [3, 2, 1];
}

def mutable-array<T> append(Value: T) -> mutable-array<T> {
  primitive array.append-mut(self.array, Value);
  self;
} test {
  let A = #mutable-array from([]);
  assert A append(1) read-only() ==> [1];
  assert A append(2) read-only() ==> [1, 2];
  assert A append(3) read-only() ==> [1, 2, 3];
}

// -- Conversions --------------------------------------------------------------
def mutable-array<T> read-only() = self.array;