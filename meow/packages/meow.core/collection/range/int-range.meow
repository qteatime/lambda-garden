% meow/1

//#region Constructing ---------------------------------------------------------
def #int-range from(start Start: int, stop Stop: int, step Step: int) =
  new int-range(Start, Stop, Step);

def #contiguous-int-range from(start Start: int, stop Stop: int) =
  new contiguous-int-range(Start, Stop);

def int to(Stop: int, step Step: int) =
  #int-range from(start: self, stop: Stop, step: Step);

def int to(Stop: int) =
  #contiguous-int-range from(start: self, stop: Stop);

def int til(Stop: int, step Step: int) =
  #int-range from(start: self, stop: Stop - 1, step: Step);

def int til(Stop: int) =
  #contiguous-int-range from(start: self, stop: Stop - 1);
//#endregion

//#region Range ----------------------------------------------------------------
implement range<int> for int-range;
implement step-range<int> for int-range;

def int-range lower-bound() = self.start;
def int-range upper-bound() = self.stop;
def int-range step() = self.step;
def int-range count() = (self.stop - self.start) \ self.step;


implement range<int> for contiguous-int-range;
implement contiguous-range<int> for contiguous-int-range;

def contiguous-int-range lower-bound() = self.start;
def contiguous-int-range upper-bound() = self.stop;
def contiguous-int-range count() = self.stop - self.start;
//#endregion

//#region Iterating ------------------------------------------------------------
implement iterable<int> for int-range-iterator;
implement iterator<int> for int-range-iterator;
def int-range-iterator size-hint() =
  #maybe some(
    (((self.stop - self.current read()) as f64) / (self.step as f64)) ceiling() as int
  );

def int-range-iterator take-next() -> maybe<int> {
  let Current = self.current read();
  when {
    Current > self.stop -> maybe..none;
    otherwise {
      self.current <- Current + self.step;
      #maybe some(Current);
    }
  }
} test {
  let A = new int-range-iterator(current: #cell of(0), stop: 2, step: 1);
  assert A take-next() ==> #maybe some(0);
  assert A take-next() ==> #maybe some(1);
  assert A take-next() ==> #maybe some(2);
  assert A take-next() ==> maybe..none;
}

implement iterable<int> for int-range;
def int-range iterator() {
  new int-range-iterator(current: #cell of(self.start), stop: self.stop, step: self.step);
} test {
  assert (1 to(5, step: 2) iterator() into(#array)) ==> [1, 3, 5];
  assert (1 til(5, step: 2) iterator() into(#array)) ==> [1, 3];
}

implement iterable<int> for contiguous-int-range;
def contiguous-int-range iterator() {
  new int-range-iterator(current: #cell of(self.start), stop: self.stop, step: 1);
} test {
  assert (1 to(5) iterator() into(#array)) ==> [1, 2, 3, 4, 5];
  assert (1 til(4) iterator() into(#array)) ==> [1, 2, 3];
}
//#endregion