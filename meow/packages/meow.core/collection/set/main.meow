% meow/1

trait set<V> {
  def self count() -> int;
  optional def self is-empty() -> bool;

  def self contains(Value: V) -> bool;
  def self values() -> Iter where Iter has iterator<V>;
}

trait set-algebra<V> {
  requires trait set<V> for self;

  def self insersection(That: self) -> self;
  def self 'union(That: self) -> self;
  def self difference(That: self) -> self;

  optional def self symmetric-difference(That: self) -> self;
  optional def self is-subset(That: self) -> bool;
  optional def self is-superset(That: self) -> bool;
  optional def self is-disjoint(That: self) -> bool;
}

trait modifiable-set<V> {
  requires trait set<V> for self;

  def self put(Value: V) -> self;
  optional def self put(if-absent Value: V) -> self;
  optional def self put(all-of Values: ValueIter) -> self where ValueIter has iterable<V>;

  def self remove(Value: V) -> self;
  optional def self remove(if-existing Value: V) -> self;
  optional def self remove-all() -> self;
}

def (_: Set) is-empty() -> bool where Set has set<A> {
  self count() === 0;
} test {
  assert #set from([]) is-empty();
  assert not (#set from([1, 2, 3])) is-empty();
}

def (_: Set) symmetric-difference(That: Set) -> Set where Set has set-algebra<A> {
  (self difference(That)) 'union(That difference(self));
} test {
  assert #set from([1, 2, 3]) symmetric-difference(#set from([2, 4, 6]))
    ==> #set from([1, 3, 4, 6]);
}

def (_: Set) is-subset(That: Set) -> bool where Set has set-algebra<A> {
  self values() all(That contains(_));
} test {
  assert #set from([1, 2, 3]) is-subset(#set from([1, 2, 3, 4]));
  assert not #set from([1, 2, 3]) is-subset(#set from([1, 2]));
}

def (_: Set) is-superset(That: Set) -> bool where Set has set-algebra<A> {
  That is-subset(self);
} test {
  assert not #set from([1, 2, 3]) is-superset(#set from([1, 2, 3, 4]));
  assert #set from([1, 2, 3]) is-superset(#set from([1, 2]));
}

def (_: Set) is-disjoint(That: Set) -> bool where Set has set-algebra<A> {
  self values() none(That contains(_));
} test {
  assert #set from([1, 2, 3]) is-disjoint(#set from([4, 5, 6]));
  assert not (#set from([1, 2, 3]) is-disjoint(#set from([3, 4, 5])));
}

import "constructing.meow";
import "memory.meow";
import "querying.meow";
import "modifying.meow";
import "set-algebra.meow";