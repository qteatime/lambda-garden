% meow/1

//#region - Integral values ----------------------------------------------------
union integer-parse-error {
  invalid-integer(input: text);
  out-of-range(input: text, type: static);
}

def #int parse(Input: text) -> result<int, integer-parse-error> {
  #result
    from(primitive int.parse(Input))
    map-error({X in
      when {
        X =:= "not-integer" => new integer-parse-error..invalid-integer(Input);
        X =:= "out-of-range" => new integer-parse-error..out-of-range(Input, #int);
      }
    });
} test {
  assert #int parse("-1234") unwrap() ==> -1234;
  assert #int parse("1234") unwrap() ==> 1234;
  assert #int parse("1_234") unwrap() ==> 1234;
  assert #int parse("  123  ") unwrap() ==> 123;
  assert #int parse("123s") reason() is integer-parse-error..invalid-integer;
  assert #int parse("1234567890123456789") reason() is integer-parse-error..out-of-range;
  assert #int parse("123.1") reason() is integer-parse-error..invalid-integer;
}

def #i64 parse(Input: text) -> result<i64, integer-parse-error> {
  #result
    from(primitive i64.parse(Input))
    map-error({X in
      when {
        X =:= "not-integer" => new integer-parse-error..invalid-integer(Input);
      }
    });
} test {
  assert #i64 parse("-1234") unwrap() ==> -1234L;
  assert #i64 parse("1234") unwrap() ==> 1234L;
  assert #i64 parse("1_234") unwrap() ==> 1234L;
  assert #i64 parse("  123  ") unwrap() ==> 123L;
  assert #i64 parse("123L") reason() is integer-parse-error..invalid-integer;
  assert #i64 parse("1234567890123456789") unwrap() ==> 1234567890123456789L;
  assert #i64 parse("123.1") reason() is integer-parse-error..invalid-integer;
}
//#endregion

//#region - Floating point values ----------------------------------------------
union float-parse-error {
  invalid-float(input: text);
  out-of-range(input: text, type: static);
}

def #f64 parse(Input: text) -> result<f64, float-parse-error> {
  #result
    from(primitive f64.parse(Input))
    map-error({X in
      when {
        X =:= "not-float" => new float-parse-error..invalid-float(Input);
      }
    });
} test {
  assert #f64 parse("1") unwrap() ==> 1.0f;
  assert #f64 parse("100_000.10") unwrap() ==> 100_000.10f;
  assert #f64 parse("-123.456") unwrap() ==> -123.456f;
  assert #f64 parse("NaN") reason() is float-parse-error..invalid-float;
  assert #f64 parse("123f") reason() is float-parse-error..invalid-float;
}
//#endregion