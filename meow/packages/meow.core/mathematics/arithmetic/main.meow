% meow/1

trait addition {
  def #self zero() -> self;
  def self + self -> self;
}

trait multiplication {
  def #self one() -> self;
  def self * self -> self;
}

//#region - Integral arithmetic ------------------------------------------------
/// Integral arithmetic works on the space of integral numbers, and is
/// guaranteed to always produce values that remain in the space of
/// integral numbers.
///
/// Implementations of this trait are allowed to be partial on the
/// implementation of each method. In that case the implementation
/// *must* panic when the behaviour would fall outside of its defined
/// space.
///
/// That is, adding two i32 numbers might not be possible because the
/// resulting value would fall outside of the space of i32 numbers. When
/// this happens the implementation *must* panic --- it cannot treat just
/// clamp or wrap the values around and merrily continue the program
/// execution because that would violate laws such as `(a + b) > a` when
/// the operands are both positive!
trait integral-arithmetic {
  /// Addition.
  def self + self -> self;

  /// Subtraction.
  def self - self -> self;

  /// Multiplication.
  def self * self -> self;

  /// Integral division.
  def self \ self -> self; // requires divisor =/= 0

  /// Exponentiation.
  def self ** self -> self;

  /// Modulo division.
  def self % self -> self; // requires divisor =/= 0

  /// Unary negation.
  def - self;
}

import "sized-integers.meow";
//#endregion


//#region - Fractional arithmetic ----------------------------------------------
trait fractional-arithmetic {
  /// Addition.
  def self + self -> self;

  /// Subtraction.
  def self - self -> self;

  /// Multiplication.
  def self * self -> self;

  /// Fractional division.
  def self / self -> self; // requires divisor =/= 0

  /// Exponentiation.
  def self ** self -> self;

  /// Modulo division.
  def self % self -> self; // requires divisor =/= 0

  /// Unary negation.
  def - self;
}

import "sized-floating.meow";
//#endregion

//#region - Bitwise arithmetic -------------------------------------------------
/// Bitwise arithmetic works on the space of bits under a constrained size.
/// Overflows are handled by wrapping values around.
trait bitwise-arithmetic {
  /// Bitwise shift left.
  def self bit-shl(self) -> self;

  /// Bitwise shift right (arithmetic).
  def self bit-shr(self) -> self;

  /// Bitwise shift right (logical).
  def self bit-lshr(self) -> self;

  /// Bitwise or.
  def self bit-or(self) -> self;

  /// Bitwise and.
  def self bit-and(self) -> self;

  /// Bitwise xor.
  def self bit-xor(self) -> self;

  /// Btiwise not.
  def self bit-not() -> self;
}

import "bitwise-arithmetic.meow";
//#endregion
