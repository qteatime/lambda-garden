% meow/1

//#region: Native sized integers (int) -----------------------------------------
def int + (X: int) -> int {
  primitive int.add(self, X);
} test {
  assert 0 + 0 ==> 0;
  assert 1 + 0 ==> 1;
  assert 0 + 1 ==> 1;
  assert -3 + 1 ==> -2;
  assert 5 + 3 ==> 8;
  assert 20 + 22 ==> 42;
}

def int - (X: int) -> int {
  primitive int.sub(self, X);
} test {
  assert 0 - 0 ==> 0;
  assert 1 - 0 ==> 1;
  assert 0 - 1 ==> -1;
  assert -3 - 1 ==> -4;
  assert 5 - 3 ==> 2;
  assert 20 - 22 ==> -2;
  assert 22 - 20 ==> 2;
}

def int * (X: int) -> int {
  primitive int.mul(self, X);
} test {
  assert 0 * 0 ==> 0;
  assert 1 * 0 ==> 0;
  assert 0 * 1 ==> 0;
  assert 1 * 1 ==> 1;
  assert 20 * 2 ==> 40;
}

def int \ (X: int) -> int {
  assert X =/= 0 :: non-zero-divisor;
  primitive int.div(self, X);
} test {
  assert 4 \ 2 ==> 2;
  assert 3 \ 2 ==> 1;
  assert 1 \ 3 ==> 0;
  assert 0 \ 1 ==> 0;
  assert 3 \ -1 ==> -3;
  assert panic catch({ 3 \ 0 }) is result..error;
}

def int ** (X: int) -> int {
  assert X >= 0 :: positive-exponent;
  primitive int.pow(self, X);
} test {
  assert 1 ** 0 ==> 1;
  assert 0 ** 0 ==> 1;
  assert 3 ** 0 ==> 1;
  assert 1 ** 1 ==> 1;
  assert -1 ** 1 ==> -1;
  assert 2 ** 6 ==> 64;
}

def int % (X: int) -> int {
  assert X =/= 0 :: non-zero-divisor;
  primitive int.mod(self, X);
} test {
  assert 4 % 2 ==> 0;
  assert 3 % 2 ==> 1;
  assert 1 % 3 ==> 1;
  assert 0 % 1 ==> 0;
  assert 3 % -1 ==> 0;
  assert (123456789 % 12) ==> 9;
  assert panic catch({ (3 % 0) }) is result..error;
}

def -int -> int {
  primitive int.negate(self);
} test {
  assert -(0) ==> 0;
  assert -(1) ==> -1;
  assert -(-1) ==> 1;
}
//#endregion

//#region: 64-bit sized integers (i64) -----------------------------------------
def i64 + (X: i64) -> i64 {
  primitive i64.add(self, X);
} test {
  assert 0L + 0L ==> 0L;
  assert 1L + 0L ==> 1L;
  assert 0L + 1L ==> 1L;
  assert -3L + 1L ==> -2L;
  assert 5L + 3L ==> 8L;
  assert 20L + 22L ==> 42L;
  assert 1234567890123456789L + 1234567890123456789L ==> 2469135780246913578L;
}

def i64 - (X: i64) -> i64 {
  primitive i64.sub(self, X);
} test {
  assert 0L - 0L ==> 0L;
  assert 1L - 0L ==> 1L;
  assert 0L - 1L ==> -1L;
  assert -3L - 1L ==> -4L;
  assert 5L - 3L ==> 2L;
  assert 20L - 22L ==> -2L;
  assert 22L - 20L ==> 2L;
  assert 1234567890123456789L - 1L ==> 1234567890123456788L;
}

def i64 * (X: i64) -> i64 {
  primitive i64.mul(self, X);
} test {
  assert 0L * 0L ==> 0L;
  assert 1L * 0L ==> 0L;
  assert 0L * 1L ==> 0L;
  assert 1L * 1L ==> 1L;
  assert 20L * 2L ==> 40L;
  assert 123456789L * 123456789L ==> 15241578750190521L;
}

def i64 \ (X: i64) -> i64 {
  assert X =/= 0L :: non-zero-divisor;
  primitive i64.div(self, X);
} test {
  assert 4L \ 2L ==> 2L;
  assert 3L \ 2L ==> 1L;
  assert 1L \ 3L ==> 0L;
  assert 0L \ 1L ==> 0L;
  assert 3L \ -1L ==> -3L;
  assert 123456789L \ 12L ==> 10288065L;
  assert panic catch({ 3L \ 0L }) is result..error;
}

def i64 ** (X: i64) -> i64 {
  assert X >= 0L :: positive-exponent;
  primitive i64.pow(self, X);
} test {
  assert 1L ** 0L ==> 1L;
  assert 0L ** 0L ==> 1L;
  assert 3L ** 0L ==> 1L;
  assert 1L ** 1L ==> 1L;
  assert -1L ** 1L ==> -1L;
  assert 2L ** 6L ==> 64L;
  assert 2L ** 64L ==> 18446744073709551616L;
}

def i64 % (X: i64) -> i64 {
  assert X =/= 0L :: non-zero-divisor;
  primitive i64.mod(self, X);
} test {
  assert 4L % 2L ==> 0L;
  assert 3L % 2L ==> 1L;
  assert 1L % 3L ==> 1L;
  assert 0L % 1L ==> 0L;
  assert 3L % -1L ==> 0L;
  assert (123456789L % 12L) ==> 9L;
  assert panic catch({ 3L % 0L }) is result..error;
}

def -i64 -> i64 {
  primitive i64.negate(self);
} test {
  assert -(0L) ==> 0L;
  assert -(1L) ==> -1L;
  assert -(-1L) ==> 1L;
}
//#endregion

