% meow/1

//#region - Native-sized integers (int) ----------------------------------------
def #int upper-bound() = primitive int.max();
def #int lower-bound() = primitive int.min();

def int successor() -> int {
  self + 1;
} test {
  assert -2 successor() ==> -1;
  assert -1 successor() ==> 0;
  assert 0 successor() ==> 1;
  assert 1 successor() ==> 2;
}

def int predecessor() -> int {
  self - 1;
} test {
  assert 2 predecessor() ==> 1;
  assert 1 predecessor() ==> 0;
  assert 0 predecessor() ==> -1;
  assert -1 predecessor() ==> -2;
}

def int clamp(min Min: int, max Max: int) -> int {
  when {
    self < Min => Min;
    self > Max => Max;
    otherwise => self;
  }
} test {
  assert 2 clamp(min: 0, max: 5) ==> 2;
  assert -3 clamp(min: 0, max: 5) ==> 0;
  assert 9 clamp(min: 0, max: 5) ==> 5;
}

def int is-between(min Min: int, max Max: int) -> int {
  (self >= Min) and (self <= Max);
} test {
  assert 2 is-between(min: 0, max: 5) ==> true;
  assert 0 is-between(min: 0, max: 5) ==> true;
  assert 5 is-between(min: 0, max: 5) ==> true;
  assert -3 is-between(min: 0, max: 5) ==> false;
  assert 9 is-between(min: 0, max: 5) ==> false;
}
//#endregion

//#region - 64-bit sized integers (i64) ----------------------------------------
def #i64 upper-bound() = (2L ** 63L) - 1L;
def #i64 lower-bound() = -2L ** 63L;

def i64 successor() -> i64 {
  self + 1L;
} test {
  assert -2L successor() ==> -1L;
  assert -1L successor() ==> 0L;
  assert 0L successor() ==> 1L;
  assert 1L successor() ==> 2L;
}

def i64 predecessor() -> i64 {
  self - 1L;
} test {
  assert 2L predecessor() ==> 1L;
  assert 1L predecessor() ==> 0L;
  assert 0L predecessor() ==> -1L;
  assert -1L predecessor() ==> -2L;
}

def i64 clamp(min Min: i64, max Max: i64) -> i64 {
  when {
    self < Min => Min;
    self > Max => Max;
    otherwise => self;
  }
} test {
  assert 2L clamp(min: 0L, max: 5L) ==> 2L;
  assert -3L clamp(min: 0L, max: 5L) ==> 0L;
  assert 9L clamp(min: 0L, max: 5L) ==> 5L;
}

def i64 is-between(min Min: i64, max Max: i64) -> i64 {
  (self >= Min) and (self <= Max);
} test {
  assert 2L is-between(min: 0L, max: 5L) ==> true;
  assert 0L is-between(min: 0L, max: 5L) ==> true;
  assert 5L is-between(min: 0L, max: 5L) ==> true;
  assert -3L is-between(min: 0L, max: 5L) ==> false;
  assert 9L is-between(min: 0L, max: 5L) ==> false;
}
//#endregion