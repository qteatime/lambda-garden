% meow/1

//#region - Native-sized integers (int)
implement equality for int;

pure def int === (X: int) -> bool {
  primitive int.eq(self, X);
} test {
  assert 0 === 0;
  assert 1 === 1;
  assert not (1 === -1);
  assert not (1 === 2);
}

pure def int =/= (X: int) -> bool {
  primitive int.neq(self, X);
} test {
  assert 1 =/= -1;
  assert 1 =/= 2;
  assert not (0 =/= 0);
  assert not (1 =/= 1);
}
//#endregion

//#region - 64-bit sized integers (i64)
implement equality for i64;

pure def i64 === (X: i64) -> bool {
  primitive i64.eq(self, X);
} test {
  assert 0L === 0L;
  assert 1L === 1L;
  assert not (1L === -1L);
  assert not (1L === 2L);
}

pure def i64 =/= (X: i64) -> bool {
  primitive i64.neq(self, X);
} test {
  assert 1L =/= -1L;
  assert 1L =/= 2L;
  assert not (0L =/= 0L);
  assert not (1L =/= 1L);
}
//#endregion

//#region - 64-bit floating points (f64)
// TODO: still need to define how exactly we assign semantics with traits
//       because floats are in a very unfortunate position implementing eq.
implement equality for f64;

pure def f64 === (X: f64) -> bool {
  assert not (self is-nan() or X is-nan()) :: defined-number;
  primitive f64.eq(self, X);
} test {
  assert 0.0f === 0.0f;
  assert 1.0f === 1.0f;
  assert not (1.0f === -1.0f);
  assert not (1.0f === 2.0f);
}

pure def f64 =/= (X: f64) -> bool {
  assert not (self is-nan() or X is-nan()) :: defined-number;
  primitive f64.neq(self, X);
} test {
  assert 1.0f =/= -1.0f;
  assert 1.0f =/= 2.0f;
  assert not (0.0f =/= 0.0f);
  assert not (1.0f =/= 1.0f);
}
//#endregion