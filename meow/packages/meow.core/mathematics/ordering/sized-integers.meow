% meow/1

//#region - Native-sized integers (int) ----------------------------------------
implement total-order for int;

pure def int < (X: int) -> bool {
  primitive int.lt(self, X);
} test {
  assert 0 < 1;
  assert -1 < 0;
  assert not (0 < 0);
  assert not (1 < 0);
}

pure def int <= (X: int) -> bool {
  primitive int.lte(self, X);
} test {
  assert 0 <= 1;
  assert -1 <= 0;
  assert 0 <= 0;
  assert not (1 <= 0);
}

pure def int > (X: int) -> bool {
  primitive int.gt(self, X);
} test {
  assert 1 > 0;
  assert 0 > -1;
  assert not (0 > 0);
  assert not (0 > 1);
}

pure def int >= (X: int) -> bool {
  primitive int.gte(self, X);
} test {
  assert 1 >= 0;
  assert 0 >= -1;
  assert 0 >= 0;
  assert not (0 >= 1);
}

pure def int compare-to(X: int) -> ordering {
  when {
    self < X -> ordering..less-than;
    self === X -> ordering..equal;
    self > X -> ordering..greater-than;
  }
} test {
  assert 1 compare-to(2) ==> ordering..less-than;
  assert 1 compare-to(0) ==> ordering..greater-than;
  assert 1 compare-to(1) ==> ordering..equal;
}
//#endregion

//#region - 64-bit sized integers (i64) ----------------------------------------
implement total-order for i64;

pure def i64 < (X: i64) -> bool {
  primitive i64.lt(self, X);
} test {
  assert 0L < 1L;
  assert -1L < 0L;
  assert not (0L < 0L);
  assert not (1L < 0L);
}

pure def i64 <= (X: i64) -> bool {
  primitive i64.lte(self, X);
} test {
  assert 0L <= 1L;
  assert -1L <= 0L;
  assert 0L <= 0L;
  assert not (1L <= 0L);
}

pure def i64 > (X: i64) -> bool {
  primitive i64.gt(self, X);
} test {
  assert 1L > 0L;
  assert 0L > -1L;
  assert not (0L > 0L);
  assert not (0L > 1L);
}

pure def i64 >= (X: i64) -> bool {
  primitive i64.gte(self, X);
} test {
  assert 1L >= 0L;
  assert 0L >= -1L;
  assert 0L >= 0L;
  assert not (0L >= 1L);
}

pure def i64 compare-to(X: i64) -> ordering {
  when {
    self < X -> ordering..less-than;
    self === X -> ordering..equal;
    self > X -> ordering..greater-than;
  }
} test {
  assert 1L compare-to(2L) ==> ordering..less-than;
  assert 1L compare-to(0L) ==> ordering..greater-than;
  assert 1L compare-to(1L) ==> ordering..equal;
}
//#endregion