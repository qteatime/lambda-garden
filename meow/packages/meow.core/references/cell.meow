% meow/1

pure def #cell of(Value: T) -> cell<T> {
  primitive cell.new(Value);
}

pure def cell<T> read() -> T {
  primitive cell.deref(self);
}

pure def cell<T> <- (Value: T) -> T {
  primitive cell.exchange(self, Value);
}

pure def cell<T> set(Value: T, if-contains Old: T) -> bool {
  primitive cell.cas(self, Value, Old);
} test {
  let A = #cell of(1);
  assert A set(2, if-contains: 1) ==> true;
  assert A read() ==> 2;
  assert A set(3, if-contains: 1) ==> false;
  assert A read() ==> 2;
}

def cell<T> update(Fn: (T) -> T) -> bool {
  let Current = self read();
  let New = Fn(Current);
  self set(New, if-contains: Current);
} test {
  let A = #cell of(1);
  assert A update(_ + 1) ==> true;
  assert A read() ==> 2;
  assert A update({ V in
    A <- 0;
    assert V ==> 2;
    V + 1;
  }) ==> false;
  assert A read() ==> 0;
}

test "basic cells" {
  let A = #cell of(1);
  assert A read() ==> 1;
  let B = #cell of(nothing);
  assert B read() ==> nothing;
  assert (A <- 2) ==> 1;
  assert A read() ==> 2;
  assert (B <- 1) ==> nothing;
  assert B read() ==> 1;
}