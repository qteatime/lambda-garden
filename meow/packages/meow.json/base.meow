% meow/1

def json parse(Source: text) -> result<unknown, parse-error> {
  let Result0 = foreign json.parse(Source);
  when {
    Result0 at!(0) -> #result ok(Result0 at!(1));
    otherwise -> #result error(new parse-error..syntax-error(Result0 at!(1)));
  }
} test {
  assert json parse("1234") unwrap() ==> 1234.0f;
  assert json parse("\"abc\"") unwrap() ==> "abc";
  assert json parse("[123, null, [true, false]]") unwrap() ==> [123.0f, nothing, [true, false]];
  assert json parse("{\"a\": [1, 2], \"b\": {\"c\": 3}}") unwrap() ==> ["a": [1.0f, 2.0f], "b": ["c": 3.0f]];
  assert json parse("[123") is result..error;
}

def json parse!(Source: text) = self parse(Source) unwrap(or-panic: "Invalid JSON");

def json serialise(Value: unknown, indent Indent: int) -> result<text, serialise-error> {
  let Result0 = foreign json.serialise(Value, Indent);
  when {
    Result0 at!(0) -> #result ok(Result0 at!(1));
    otherwise -> #result error(new serialise-error..unknown-error(Result0 at!(1)));
  }
} test {
  assert json serialise(1234.0f, indent: 0) unwrap() ==> "1234";
  assert json serialise(1234, indent: 0) unwrap() ==> "1234";
  assert json serialise(1234L, indent: 0) is result..error;
  assert json serialise("abc", indent: 0) unwrap() ==> "\"abc\"";
  assert json serialise([123, nothing, [true, false]], indent: 0) unwrap() ==> "[123,null,[true,false]]";
  assert json serialise(["a": [1, 2], "b": ["c": 3]], indent: 0) unwrap() ==> "{\"a\":[1,2],\"b\":{\"c\":3}}";
  assert json serialise(#(a: 1, b: 2), indent: 0) is result..error;
}


def json serialise(Value: unknown) = self serialise(Value, indent: 0);
def json pretty-print(Value: unknown) = self serialise(Value, indent: 2);

def json serialise!(Value: unknown) =
  self serialise(Value) unwrap(or-panic: "Unserialisable value");

def json pretty-print!(Value: unknown) =
  self pretty-print(Value) unwrap(or-panic: "Unserialisable value");