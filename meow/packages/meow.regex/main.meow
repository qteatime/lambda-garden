% meow/1

import foreign "native/re.js";

singleton regex;

struct regex-match(input: text, groups: array<text>);

struct compiled-pattern(code: compiled-regex);

union flag {
  ignore-case;
  multiline;
  dot-all;
  global;
  sticky;
}

union regex-error {
  no-matches(pattern: compiled-pattern, input: text);
}

implement panic-message for regex-error;
def panic raise(Msg: regex-error..no-matches, tag Tag: text, data Data: unknown) {
  panic raise("No matches for regex", tag: Tag, data: #(pattern: Msg.pattern, input: Msg.input, other: Data));
}

struct regex-id(name: text);

union pattern {
  // Structure
  parens(expr: pattern);
  // Basic constructors
  anything;
  word-boundary;
  not-word-boundary;
  range(start: text, stop: text);
  not-range(start: text, stop: text);
  charset(chars: array<text>);
  not-charset(chars: array<text>);
  char-class(class: text);
  exact(text: pattern);
  raw(code: text);
  // Modifiers
  pin-start(expr: pattern);
  pin-end(expr: pattern);
  // Peek
  lookahead(peek: pattern, consume: pattern);
  not-lookahead(peek: pattern, consume: pattern);
  lookbehind(peek: pattern, consume: pattern);
  not-lookbehind(peek: pattern, consume: pattern);
  // Combinators
  alt(left: pattern, right: pattern);
  many(expr: pattern);
  many1(expr: pattern);
  opt(expr: pattern);
  'repeat(expr: pattern, times: int);
  repeat-at-least(expr: pattern, times: int);
  repeat-between(expr: pattern, min: int, max: int);
  seq(items: array<pattern>);
  // Captures
  capture(expr: pattern);
  named-capture(name: regex-id, expr: pattern);
  backref(index: int);
  named-backref(name: regex-id);
}


struct split-iterator(pattern: compiled-pattern, text: text, offset: cell<int>);


import "compilation.meow";
import "constructors.meow";
import "operations.meow";