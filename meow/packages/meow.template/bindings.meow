% meow/1

def #bindings from(X: bindings, on-not-found F: (array<text>) -> text) =
  new bindings(mapping: X.mapping, on-not-found: F);

def #bindings from(X: unknown, on-not-found F: (array<text>) -> text) =
  new bindings(mapping: X, on-not-found: F);

def #bindings from(X: unknown) =
  self from(X, on-not-found: { Names in
    panic raise("Binding not found " ++ #text join(Names, with: "."))
  });


def bindings lookup(Names: array<text>) {
  repeat with X = Names, M = self.mapping {
    when {
      X is-empty() => break with M;
      otherwise => do {
        let Name = X first!();
        let Value = M at(Name);
        when {
          Value is maybe..none => break with self.on-not-found(Names);
          Value is maybe..some => continue with X = X rest(), M = Value unwrap();
        }
      }
    }
  }
} test {
  let Env = #bindings from(["a": ["b": ["c": "ok"]]], on-not-found: {_ in ""});
  assert Env lookup(["a", "b", "c"]) ==> "ok";
  assert Env lookup(["a"]) ==> ["b": ["c": "ok"]];
  assert Env lookup(["a", "d"]) ==> "";
}
